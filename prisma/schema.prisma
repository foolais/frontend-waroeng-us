generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Gender {
  male
  female
  other
}

enum Role {
  user
  admin
}

model User {
  id               String     @id @default(cuid())
  name             String
  address          String?    @default("")
  phone            String?    @default("")
  gender           Gender?    @default(male)
  email            String     @unique
  image            String?    @default("")
  role             Role       @default(user)
  password         String
  accounts         Account[]
  sessions         Session[]
  menu_created     Menu[]     @relation("Menu-Created")
  menu_updated     Menu[]     @relation("Menu-Updated")
  category_created Category[] @relation("Category-Created")
  category_updated Category[] @relation("Category-Updated")
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  created_by_name  String
  updated_by_name  String?

  @@map("users")
}

model Menu {
  id            String    @id @default(cuid())
  name          String
  image         String?   @default("")
  price         Int
  is_available  Boolean   @default(true)
  category      Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  category_id   String?
  created_by_id String
  created_by    User?     @relation("Menu-Created", fields: [created_by_id], references: [id])
  updated_by_id String?
  updated_by    User?     @relation("Menu-Updated", fields: [updated_by_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("menus")
}

model Category {
  id            String   @id @default(cuid())
  name          String
  type          String
  Menu          Menu[]
  is_active     Boolean  @default(true)
  created_by_id String
  created_by    User?    @relation("Category-Created", fields: [created_by_id], references: [id])
  updated_by_id String?
  updated_by    User?    @relation("Category-Updated", fields: [updated_by_id], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("categories")
}
